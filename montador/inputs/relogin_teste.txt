VARIAVEL_INIT
ZERO = 0
UM = 1
DOIS = 2
TRES = 3
QUATRO = 4
CINCO = 5
TROCA_AM_PM = 7
AUX_LED = 8
VALOR_ATUAL0 = 20
VALOR_ATUAL1 = 21
VALOR_ATUAL2 = 22
VALOR_ATUAL3 = 23
VALOR_ATUAL4 = 24
VALOR_ATUAL5 = 25
FLAG_12_OU_24 = 31
SEIS = 37
DEZ = 38
LED0A7 = 256
LED8 = 257
LED9 = 258
HEX0 = 288
HEX1 = 289
HEX2 = 290
HEX3 = 291
HEX4 = 292
HEX5 = 293
SW0a7 = 320
SW8 = 321
SW9 = 322
KEY0 = 352
KEY1 = 353
KEY2 = 354
BASE_TEMPO = 357
BASE_TEMPO_RAP = 358
LIMPA_KEY1 = 510
LIMPA_KEY0 = 511
LIMPA_BASE_TEMPO = 509
LIMPA_BASE_TEMPO_RAP = 508  
VARIAVEL_FIM
JSR .setup          # Chama a função setup, para limpar os endereços
JMP .LOOP_HEX
PASSA_HEX:          # começo do LOOP para HEX0
JSR .troca_hex
JMP .LOOP_HEX
VOLTA_SET_RELOGIO:
JSR .limpa_but
JSR .setar_hora
JSR .ajusta_leds
LOOP_HEX:
JSR .logica_seleciona
JEQ .PASSA_HEX       # SE botão for pressionado realiza o salto, se não continua
JSR .verifica_key1
JEQ .relogio_principal
JMP .LOOP_HEX      # se botão não pressionado, volta para o LOOP de HEX0
relogio_principal:
JSR .limpa_but
JSR .limpa_led
loop_relogio:
JSR .verifica_key0
JEQ .VOLTA_SET_RELOGIO
JSR .verifica_carry
LDA R2 @KEY2
CEQ R2 @ZERO
JEQ .TEMPO_RAPIDO
LDI R3 $0
STA @LED0A7 R3
LDA R0 @BASE_TEMPO        	# Salva o endereço da base_tempo2 no R0
STA @LIMPA_BASE_TEMPO R0    
JMP .VERIFICA_TEMPO
TEMPO_RAPIDO:
LDI R3 $64
STA @LED0A7 R3
LDA R0 @BASE_TEMPO_RAP        	# Salva o endereço da base_tempo2 no R0
STA @LIMPA_BASE_TEMPO_RAP R0  
VERIFICA_TEMPO:
CEQ R0 @UM                  # Verifica se a base de tempo será utilizada
JEQ .INCREMENTA             # Se for vai para a rotina de incremento
JMP .loop_relogio
INCREMENTA:
LDA R1 @VALOR_ATUAL0
SOMA R1 @UM
STA @VALOR_ATUAL0 R1
JMP .loop_relogio
setup:              # Definindo a função setup, roda sempre no início limpando os valores
NOP
LDI R0 $0           
STA @ZERO R0
STA @HEX0 R0
STA @HEX1 R0
STA @HEX2 R0
STA @HEX3 R0
STA @HEX4 R0
STA @HEX5 R0
STA @LED8 R0
STA @LED9 R0
STA @VALOR_ATUAL0 R0
STA @VALOR_ATUAL1 R0
STA @VALOR_ATUAL2 R0
STA @VALOR_ATUAL3 R0
STA @VALOR_ATUAL4 R0
STA @VALOR_ATUAL5 R0
LDI R0 $1
STA @UM R0
STA @LED0A7 R0
STA @LIMPA_KEY0 R0
LDI R0 $2
STA @DOIS R0
LDI R0 $3
STA @TRES R0
LDI R0 $4
STA @QUATRO R0
LDI R0 $5
STA @CINCO R0
STA @AUX_LED R0
LDI R0 $6
STA @SEIS R0
LDI R0 $10
STA @DEZ R0
LDI R0 $32
STA @LED0A7 R0
RET
logica_seleciona:
JSR .escreveSW      # Função que realiza a leitura e faz verificação em qual HEX está escrevendo e escreve no correto
JSR .verifica_SW9   # Função que faz a verificação se o SW9 está ativo, se sim será 12H
JSR .verifica_key0  # Função que faz a verificação se o botão KEY0 foi pressionado, se sim flag EQUAL = 1
RET
verifica_key0:      # Definindo a função para verificar KEY0
NOP
LDA R2 @KEY0
CEQ R2 @UM
RET
verifica_key1:      # Definindo a função para verificar KEY1
NOP
LDA R3 @KEY1
CEQ R3 @UM
RET
escreveSW:
LDA R1 @SW0a7
LDA R0 @AUX_LED
CEQ R0 @CINCO
JEQ .HEX5 
LDA R0 @AUX_LED
CEQ R0 @QUATRO
JEQ .HEX4
LDA R0 @AUX_LED
CEQ R0 @TRES
JEQ .HEX3 
LDA R0 @AUX_LED
CEQ R0 @DOIS
JEQ .HEX2
LDA R0 @AUX_LED
CEQ R0 @UM
JEQ .HEX1
LDA R0 @AUX_LED
CEQ R0 @ZERO
JEQ .HEX0
HEX0:
CLT R1 @DEZ
JLT .CARREGA_HEX0
JMP .FINAL
CARREGA_HEX0:
STA @HEX0 R1
STA @VALOR_ATUAL0 R1 
JMP .FINAL 
HEX1:
CLT R1 @SEIS 
JLT .CARREGA_HEX1
JMP .FINAL
CARREGA_HEX1:
STA @HEX1 R1 
STA @VALOR_ATUAL1 R1 
JMP .FINAL 
HEX2:
CLT R1 @DEZ
JLT .CARREGA_HEX2
JMP .FINAL
CARREGA_HEX2:
STA @HEX2 R1 
STA @VALOR_ATUAL2 R1 
JMP .FINAL 
HEX3:
CLT R1 @SEIS
JLT .CARREGA_HEX3
JMP .FINAL
CARREGA_HEX3:
STA @HEX3 R1 
STA @VALOR_ATUAL3 R1 
JMP .FINAL 
HEX4:
LDA R0 @FLAG_12_OU_24
CEQ R0 @UM
JEQ .12_VERIFICA
LDA R2 @VALOR_ATUAL5
CEQ R2 @DOIS 
JEQ .HEX5_DOIS
CLT R1 @DEZ 
JLT .CARREGA_HEX4
JMP .FINAL
HEX5_DOIS:
CLT R1 @QUATRO 
JLT .CARREGA_HEX4 
JMP .FINAL
JEQ .CARREGA_HEX4
12_VERIFICA:
LDA R2 @VALOR_ATUAL5
CEQ R2 @ZERO 
JEQ .12_HEX5_ZERO
CLT R1 @TRES
JLT .CARREGA_HEX4
JMP .FINAL
12_HEX5_ZERO:
CLT R1 @DEZ
JLT .CARREGA_HEX4
JMP .FINAL
CARREGA_HEX4:
STA @HEX4 R1 
STA @VALOR_ATUAL4 R1 
JMP .FINAL 
HEX5:
LDA R0 @FLAG_12_OU_24           # Verifica se está no modo 12H ou 24H
CEQ R0 @UM                      # Se estiver no modo de 12H ele salta
JEQ .12_VERIFICA_5              # Salta se 12H estiver ativado
CLT R1 @TRES                    # Se estiver no modo 24H verifica a flag para ver se é menor que 3
JLT .CARREGA_HEX5
JMP .FINAL
12_VERIFICA_5:
CLT R1 @DOIS                   # Verifica a flag_1, que ativa se o valor dos SW for menor que 2
JLT .CARREGA_HEX5
JMP .FINAL
CARREGA_HEX5:                   # Escreve no HEX5
STA @HEX5 R1 
STA @VALOR_ATUAL5 R1 
FINAL:
RET 
atualiza_atual:
LDA R0 @AUX_LED
CEQ R0 @ZERO
JEQ .VOLTA_CINCO
LDA R0 @AUX_LED
SUB R0 @UM
STA @AUX_LED R0
RET
VOLTA_CINCO:
LDI R0 $5
STA @AUX_LED R0
RET
limpa_but:
STA @LIMPA_KEY0 R0 
STA @LIMPA_KEY1 R0
RET
troca_hex:
JSR .atualiza_atual
JSR .ajusta_leds
JSR .limpa_but
RET
verifica_SW9:
LDA R0 @SW9
CEQ R0 @UM
JEQ .SW_ATIVO
LDI R0 $0
STA @FLAG_12_OU_24 R0 
STA @LED9 R0
RET
SW_ATIVO:
LDI R0 $1
STA @FLAG_12_OU_24 R0 
STA @LED9 R0
JSR .AM_PM
RET
verifica_carry:
LDA R2 @VALOR_ATUAL0            # LEITURA DE HEX0 
CEQ R2 @DEZ                     # VERIFICA SE É IGUAL A 10 PARA O CARRY
JEQ .CARRY_DEZ_SEG              # SALTA SE TIVER O CARRY
LDA R2 @VALOR_ATUAL0            # SE NÃO ESCREVE O VALOR ATUAL EM HEX0
STA @HEX0 R2
RET
CARRY_DEZ_SEG:
LDA R2 @ZERO                    # COMO TEVE O CARRY, ESCREVE 0 EM SEGUNDO
STA @HEX0 R2
STA @VALOR_ATUAL0 R2        # ESCREVE 0 NOS SEGUNDOS QUANDO CARRY
LDA R2 @VALOR_ATUAL1        # LEITURA DO HEX1
SOMA R2 @UM
STA @VALOR_ATUAL1 R2
CEQ R2 @SEIS                # VERIFICA SE NÃO VAI TER O CARRY
JEQ .CARRY_MIN              # SALTA SE TIVER CARRY
LDA R2 @VALOR_ATUAL1            # SE NÃO ESCREVE O VALOR ATUAL EM HEX1
STA @HEX1 R2
RET
CARRY_MIN:
LDA R2 @ZERO                # COMO TEVE CARRY ESCREVE 0 EM HEX1
STA @HEX1 R2
STA @VALOR_ATUAL1 R2 
LDA R2 @VALOR_ATUAL2        # LEITURA DO HEX2 PARA VER SE VAI TER CARRY
SOMA R2 @UM
STA @VALOR_ATUAL2 R2
CEQ R2 @DEZ
JEQ .CARRY_DEZ_MIN          # SE TIVER CARRY REALIZA O SALTO
LDA R2 @VALOR_ATUAL2            # SE NÃO ESCREVE O VALOR ATUAL EM HEX2
STA @HEX2 R2
RET
CARRY_DEZ_MIN:
LDA R2 @ZERO               # COMO TEVE CARRY ESCREVE 0 EM HEX2
STA @HEX2 R2
STA @VALOR_ATUAL2 R2 
LDA R2 @VALOR_ATUAL3
SOMA R2 @UM
STA @VALOR_ATUAL3 R2
CEQ R2 @SEIS
JEQ .CARRY_HORA
LDA R2 @VALOR_ATUAL3            # SE NÃO ESCREVE O VALOR ATUAL EM HEX3
STA @HEX3 R2
RET
CARRY_HORA:
LDA R2 @ZERO
STA @HEX3 R2
STA @VALOR_ATUAL3 R2 
LDA R3 @FLAG_12_OU_24
CEQ R3 @UM
JEQ .HORA_12        #SALTA SE O MODO DE 12 HORAS ESTIVER ATIVADO 
LDA R2 @VALOR_ATUAL4        # COMEÇA A VERIFICAÇÃO PARA 24HORAS
SOMA R2 @UM
STA @VALOR_ATUAL4 R2
LDA R2 @VALOR_ATUAL5        # PEGA O VALOR DA HORA PARA SABER QUAL COMPARAÇÃO VOCÊ VAI FAZER
CEQ R2 @DOIS 
JEQ .DEPOIS_DAS_20H
LDA R2 @VALOR_ATUAL4
CEQ R2 @DEZ
JEQ .CARRY_HORA_24
LDA R2 @VALOR_ATUAL4            # SE NÃO ESCREVE O VALOR ATUAL EM HEX4
STA @HEX4 R2
RET                           # ROTINA ANTES DAS 20H
DEPOIS_DAS_20H:
LDA R2 @VALOR_ATUAL4
CEQ R2 @QUATRO 
JEQ .RESET_24_HORA
LDA R2 @VALOR_ATUAL4
STA @VALOR_ATUAL4 R2 
STA @HEX4 R2
RET
LDA R2 @VALOR_ATUAL4            #QUANDO ESTAMOS EM 20HORAS MAIS
CEQ R2 @QUATRO
JEQ .RESET_24_HORA:
LDA R2 @VALOR_ATUAL4            # SE NÃO ESCREVE O VALOR ATUAL EM HEX4
STA @HEX4 R2
RET
RESET_24_HORA:
LDA R2 @ZERO
STA @VALOR_ATUAL0 R2 
STA @HEX0 R2
STA @VALOR_ATUAL1 R2 
STA @HEX1 R2
STA @VALOR_ATUAL2 R2 
STA @HEX2 R2
STA @VALOR_ATUAL3 R2
STA @HEX3 R2
STA @VALOR_ATUAL4 R2
STA @HEX4 R2
STA @VALOR_ATUAL5 R2
STA @HEX5 R2
RET
CARRY_HORA_24:
LDA R2 @ZERO
STA @HEX4 R2
STA @VALOR_ATUAL4 R2 
LDA R2 @VALOR_ATUAL5
SOMA R2 @UM
STA @VALOR_ATUAL5 R2
STA @ HEX5 R2
RET
HORA_12:
LDA R2 @VALOR_ATUAL4        # LEITURA DE HEX4
SOMA R2 @UM
STA @VALOR_ATUAL4 R2
LDA R2 @VALOR_ATUAL5
CEQ R2 @UM
JEQ .10H_MAIS
LDA R2 @VALOR_ATUAL4
CEQ R2 @DEZ
JEQ .CARRY_DEZ_HORA_12
LDA R2 @VALOR_ATUAL4
STA @HEX4 R2
RET 
10H_MAIS:
LDA R2 @VALOR_ATUAL4
CEQ R2 @TRES
JEQ .RESET_12H_TROCA_AM_PM
LDA R2 @VALOR_ATUAL4
STA @HEX4 R2
RET 
JEQ .CARRY_DEZ_HORA_12
LDA R2 @VALOR_ATUAL4            # SE NÃO ESCREVE O VALOR ATUAL EM HEX2
STA @HEX4 R2
RET
CARRY_DEZ_HORA_12:
LDA R2 @ZERO
STA @HEX4 R2 
STA @VALOR_ATUAL4 R2
LDA R2 @VALOR_ATUAL5
SOMA R2 @UM
STA @VALOR_ATUAL5 R2
STA @HEX5 R2
RET
RESET_12H_TROCA_AM_PM:
LDA R2 @ZERO
STA @VALOR_ATUAL0 R2 
STA @HEX0 R2
STA @VALOR_ATUAL1 R2 
STA @HEX1 R2
STA @VALOR_ATUAL2 R2 
STA @HEX2 R2
STA @VALOR_ATUAL3 R2
STA @HEX3 R2
STA @VALOR_ATUAL5 R2
STA @HEX5 R2
LDA R2 @UM 
STA @VALOR_ATUAL4 R2
STA @HEX4 R2
LDA R2 @TROCA_AM_PM
CEQ R2 @ZERO
JEQ .LED8_ZERO
LDA R2 $0
STA @LED8 R2
STA @TROCA_AM_PM R2
JMP .FIM_RESET_LED8
LED8_ZERO:
LDI R2 $1
STA @LED8 R2
STA @TROCA_AM_PM R2
FIM_RESET_LED8:
RET
ajusta_leds:
LDA R0 @AUX_LED
CEQ R0 @CINCO
JEQ .32_NO_LED
LDA R0 @AUX_LED
CEQ R0 @QUATRO
JEQ .16_NO_LED
LDA R0 @AUX_LED
CEQ R0 @TRES
JEQ .8_NO_LED
LDA R0 @AUX_LED
CEQ R0 @DOIS
JEQ .4_NO_LED
LDA R0 @AUX_LED
CEQ R0 @UM
JEQ .2_NO_LED
LDA R0 @AUX_LED
CEQ R0 @ZERO
JEQ .1_NO_LED
32_NO_LED:
LDI R0 $32
STA @LED0A7 R0
RET
16_NO_LED:
LDI R0 $16
STA @LED0A7 R0
RET
8_NO_LED:
LDI R0 $8
STA @LED0A7 R0
RET
4_NO_LED:
LDI R0 $4
STA @LED0A7 R0
RET
2_NO_LED:
LDI R0 $2
STA @LED0A7 R0
RET
1_NO_LED:
LDI R0 $1
STA @LED0A7 R0
RET 
limpa_led:
LDI R0 $0
STA @LED0A7 R0
RET
setar_hora:
LDI R0 $5
STA @AUX_LED R0
RET
AM_PM:
LDA R0 @SW8
CEQ R0 @UM
JEQ .PM
LDI R0 $0
STA @LED8 R0
STA @TROCA_AM_PM R0
JMP .FIM_AM_PM
PM:
LDI R0 $1
STA @LED8 R0
STA @TROCA_AM_PM R0
FIM_AM_PM:
RET